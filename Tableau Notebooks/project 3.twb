<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.0420.1112                               -->
<workbook original-version='18.1' source-build='2021.1.1 (20211.21.0420.1112)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <_.fcp.SetMembershipControl.true...SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='interactivescatter' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='Happiness Score' caption='Factors of Happiness' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
        <calculation class='tableau' formula='&quot;Score&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
          <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
          <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
          <alias key='&quot;GDP&quot;' value='GDP/Capita' />
          <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
          <alias key='&quot;Score&quot;' value='Happiness Score' />
          <alias key='&quot;Social&quot;' value='Social Support' />
        </aliases>
        <members>
          <member alias='Pure Alc./Liter' value='&quot;Alcohol Consumption&quot;' />
          <member alias='Perception of Corruption' value='&quot;Corruption&quot;' />
          <member alias='Perception of Freedom' value='&quot;Freedom&quot;' />
          <member alias='GDP/Capita' value='&quot;GDP&quot;' />
          <member value='&quot;Generosity&quot;' />
          <member alias='Life Expectancy' value='&quot;Life_Expectancy_Years&quot;' />
          <member alias='Happiness Score' value='&quot;Score&quot;' />
          <member alias='Social Support' value='&quot;Social&quot;' />
        </members>
      </column>
      <column alias='Pure Alc. Liter' caption='Alcohol Consumption/Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
        <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. Liter' />
          <alias key='&quot;Beer Servings&quot;' value='Beer' />
          <alias key='&quot;Spirit Servings&quot;' value='Spirit' />
          <alias key='&quot;Wine Servings&quot;' value='Wine' />
        </aliases>
        <members>
          <member alias='Pure Alc. Liter' value='&quot;Alcohol Consumption&quot;' />
          <member alias='Beer' value='&quot;Beer Servings&quot;' />
          <member alias='Wine' value='&quot;Wine Servings&quot;' />
          <member alias='Spirit' value='&quot;Spirit Servings&quot;' />
        </members>
      </column>
      <column alias='Pure Alc./Liter' caption='Score/Alcohol' datatype='string' name='[Variables (copy)_902408822342832130]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
        <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
          <alias key='&quot;Score&quot;' value='Happiness Score' />
        </aliases>
        <members>
          <member alias='Pure Alc./Liter' value='&quot;Alcohol Consumption&quot;' />
          <member alias='Happiness Score' value='&quot;Score&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='df' inline='true' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df' name='textscan.0o76jqw11qjz9k11ff3yh1bjucmm'>
            <connection class='textscan' directory='C:/Users/joanc/DataClass/Project 3/Project3/Data' filename='df.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0o76jqw11qjz9k11ff3yh1bjucmm' name='df.csv' table='[df#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='con_code' ordinal='1' />
            <column datatype='real' name='Score' ordinal='2' />
            <column datatype='real' name='GDP' ordinal='3' />
            <column datatype='real' name='social' ordinal='4' />
            <column datatype='real' name='life_expectancy' ordinal='5' />
            <column datatype='real' name='freedom' ordinal='6' />
            <column datatype='real' name='Generosity' ordinal='7' />
            <column datatype='real' name='corruption' ordinal='8' />
            <column datatype='real' name='alcohol_consumption' ordinal='9' />
            <column datatype='integer' name='beer_servings' ordinal='10' />
            <column datatype='integer' name='spirit_servings' ordinal='11' />
            <column datatype='integer' name='wine_servings' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0o76jqw11qjz9k11ff3yh1bjucmm' name='df.csv' table='[df#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='con_code' ordinal='1' />
            <column datatype='real' name='Score' ordinal='2' />
            <column datatype='real' name='GDP' ordinal='3' />
            <column datatype='real' name='social' ordinal='4' />
            <column datatype='real' name='life_expectancy' ordinal='5' />
            <column datatype='real' name='freedom' ordinal='6' />
            <column datatype='real' name='Generosity' ordinal='7' />
            <column datatype='real' name='corruption' ordinal='8' />
            <column datatype='real' name='alcohol_consumption' ordinal='9' />
            <column datatype='integer' name='beer_servings' ordinal='10' />
            <column datatype='integer' name='spirit_servings' ordinal='11' />
            <column datatype='integer' name='wine_servings' ordinal='12' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[df.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>con_code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[con_code]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>con_code</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>Score</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>GDP</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>social</remote-name>
            <remote-type>5</remote-type>
            <local-name>[social]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>social</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expectancy]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>life_expectancy</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freedom</remote-name>
            <remote-type>5</remote-type>
            <local-name>[freedom]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>freedom</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Generosity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Generosity]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>Generosity</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[corruption]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>corruption</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alcohol_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[alcohol_consumption]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>alcohol_consumption</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>beer_servings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[beer_servings]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>beer_servings</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>spirit_servings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[spirit_servings]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>spirit_servings</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wine_servings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[wine_servings]</local-name>
            <parent-name>[df.csv]</parent-name>
            <remote-alias>wine_servings</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]&quot;' value='Alcohol' />
        </aliases>
      </column>
      <column caption='Factors' datatype='real' name='[Calculation_902408822341435392]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_902408822341632001]&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Life_Expectancy_Years' datatype='real' name='[Calculation_902408822341632001]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[life_expectancy]*100' />
      </column>
      <column caption='Score/Consumption' datatype='real' name='[Calculation_902408822343163907]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Variables (copy)_902408822342832130]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='consumption detail' datatype='real' name='[Calculation_902408822343553028]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;Beer Servings&quot; THEN [beer_servings]&#13;&#10;WHEN &quot;Wine Servings&quot; THEN [wine_servings]&#13;&#10;WHEN &quot;Spirit Servings&quot; THEN [spirit_servings]&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='real' name='[Score]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='df.csv' datatype='table' name='[__tableau_internal_object_id__].[df.csv_18A2BC7DC8424E9682B68944B591D4ED]' role='measure' type='quantitative' />
      <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
      <column caption='Beer Servings' datatype='integer' name='[beer_servings]' role='measure' type='quantitative' />
      <column caption='Con Code' datatype='string' name='[con_code]' role='dimension' type='nominal' />
      <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative' />
      <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative' />
      <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative' />
      <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative' />
      <column caption='Spirit Servings' datatype='integer' name='[spirit_servings]' role='measure' type='quantitative' />
      <column caption='Wine Servings' datatype='integer' name='[wine_servings]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Score]' derivation='Sum' name='[sum:Score:ok]' pivot='key' type='ordinal' />
      <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/joanc/OneDrive/Documents/My Tableau Repository/Datasources/df.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='05/27/2021 04:45:58 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='df' increment-value='%null%' refresh-type='create' rows-inserted='131' timestamp-start='2021-05-27 04:45:58.521' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>0</ordinal>
              <family>df.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>131</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>con_code</remote-name>
              <remote-type>129</remote-type>
              <local-name>[con_code]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>con_code</remote-alias>
              <ordinal>1</ordinal>
              <family>df.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>131</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Score</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Score</remote-alias>
              <ordinal>2</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>129</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GDP</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GDP]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GDP</remote-alias>
              <ordinal>3</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>131</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>social</remote-name>
              <remote-type>5</remote-type>
              <local-name>[social]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>social</remote-alias>
              <ordinal>4</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>121</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>life_expectancy</remote-name>
              <remote-type>5</remote-type>
              <local-name>[life_expectancy]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>life_expectancy</remote-alias>
              <ordinal>5</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>123</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>freedom</remote-name>
              <remote-type>5</remote-type>
              <local-name>[freedom]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>freedom</remote-alias>
              <ordinal>6</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>117</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Generosity</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Generosity]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Generosity</remote-alias>
              <ordinal>7</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>107</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>corruption</remote-name>
              <remote-type>5</remote-type>
              <local-name>[corruption]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>corruption</remote-alias>
              <ordinal>8</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>101</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>alcohol_consumption</remote-name>
              <remote-type>5</remote-type>
              <local-name>[alcohol_consumption]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>alcohol_consumption</remote-alias>
              <ordinal>9</ordinal>
              <family>df.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>125</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>beer_servings</remote-name>
              <remote-type>20</remote-type>
              <local-name>[beer_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>beer_servings</remote-alias>
              <ordinal>10</ordinal>
              <family>df.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>99</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>spirit_servings</remote-name>
              <remote-type>20</remote-type>
              <local-name>[spirit_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>spirit_servings</remote-alias>
              <ordinal>11</ordinal>
              <family>df.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>83</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>wine_servings</remote-name>
              <remote-type>20</remote-type>
              <local-name>[wine_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>wine_servings</remote-alias>
              <ordinal>12</ordinal>
              <family>df.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>63</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.csv_18A2BC7DC8424E9682B68944B591D4ED]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='0.714909' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.285091' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[sum:Score:ok]' type='palette'>
            <map to='#499894'>
              <bucket>3.5899999999999999</bucket>
            </map>
            <map to='#499894'>
              <bucket>4.4100000000000001</bucket>
            </map>
            <map to='#499894'>
              <bucket>5.093</bucket>
            </map>
            <map to='#499894'>
              <bucket>5.5659999999999998</bucket>
            </map>
            <map to='#499894'>
              <bucket>6.0720000000000001</bucket>
            </map>
            <map to='#499894'>
              <bucket>6.4889999999999999</bucket>
            </map>
            <map to='#499894'>
              <bucket>7.6319999999999997</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>4.1900000000000004</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>4.6310000000000002</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>5.3469999999999995</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>5.915</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>6.3739999999999997</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>7.3140000000000001</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>710.29400000000044</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>3.4079999999999999</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>4.3399999999999999</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>4.8799999999999999</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5.4719999999999995</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5.952</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>6.4189999999999996</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>7.4870000000000001</bucket>
            </map>
            <map to='#79706e'>
              <bucket>3.7949999999999999</bucket>
            </map>
            <map to='#79706e'>
              <bucket>4.4409999999999998</bucket>
            </map>
            <map to='#79706e'>
              <bucket>5.1609999999999996</bucket>
            </map>
            <map to='#79706e'>
              <bucket>5.6630000000000003</bucket>
            </map>
            <map to='#79706e'>
              <bucket>6.1230000000000002</bucket>
            </map>
            <map to='#79706e'>
              <bucket>6.9100000000000001</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>3.6320000000000001</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>4.4169999999999998</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>5.1029999999999998</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>5.6200000000000001</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>6.0830000000000002</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>6.6269999999999998</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>3.4950000000000001</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>4.3499999999999996</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>4.9329999999999998</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>5.4829999999999997</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>5.9559999999999995</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>6.4299999999999997</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>7.4950000000000001</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>4.141</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>4.5860000000000003</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>5.3019999999999996</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>5.8899999999999997</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>6.343</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>7.1900000000000004</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>2.9050000000000002</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>4.3010000000000002</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>4.657</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>5.3579999999999997</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>5.9329999999999998</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>6.3789999999999996</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>7.3239999999999998</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>4.1029999999999998</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>4.5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.2539999999999996</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>5.7620000000000005</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>6.3099999999999996</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>7.0720000000000001</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>3.5819999999999999</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>4.3559999999999999</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>4.9749999999999996</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>5.5039999999999996</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>5.9729999999999999</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>6.476</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>7.5549999999999997</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>3.8079999999999998</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>4.4470000000000001</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>5.1989999999999998</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>5.681</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>6.141</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>6.9269999999999996</bucket>
            </map>
            <map to='#d37295'>
              <bucket>3.964</bucket>
            </map>
            <map to='#d37295'>
              <bucket>4.4560000000000004</bucket>
            </map>
            <map to='#d37295'>
              <bucket>5.2009999999999996</bucket>
            </map>
            <map to='#d37295'>
              <bucket>5.7389999999999999</bucket>
            </map>
            <map to='#d37295'>
              <bucket>6.1669999999999998</bucket>
            </map>
            <map to='#d37295'>
              <bucket>6.9649999999999999</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>4.1390000000000002</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>4.5709999999999997</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>5.2949999999999999</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>5.79</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>6.3220000000000001</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>7.1390000000000002</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>4.1609999999999996</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>4.1660000000000004</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>4.5919999999999996</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>5.3209999999999997</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>5.891</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>6.3710000000000004</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>7.2720000000000002</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3.6920000000000002</bucket>
            </map>
            <map to='#e15759'>
              <bucket>4.4240000000000004</bucket>
            </map>
            <map to='#e15759'>
              <bucket>5.125</bucket>
            </map>
            <map to='#e15759'>
              <bucket>5.6360000000000001</bucket>
            </map>
            <map to='#e15759'>
              <bucket>6.0960000000000001</bucket>
            </map>
            <map to='#e15759'>
              <bucket>6.7110000000000003</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>3.5869999999999997</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>4.3769999999999998</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>5.0819999999999999</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>5.524</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>6.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>6.4879999999999995</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>7.5940000000000003</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>3.0830000000000002</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4.3079999999999998</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4.7240000000000002</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>5.3979999999999997</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>5.9450000000000003</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>6.3819999999999997</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>7.3280000000000003</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>3.9990000000000001</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>4.4710000000000001</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>5.2460000000000004</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>5.7519999999999998</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>6.2599999999999998</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>6.9770000000000003</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>3.774</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>4.4329999999999998</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>5.1550000000000002</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>5.6399999999999997</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>6.1050000000000004</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>6.8140000000000001</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>3.3029999999999999</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>4.3209999999999997</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>4.758</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5.4100000000000001</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5.9480000000000004</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>6.3879999999999999</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>7.4409999999999998</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='Happiness Score' caption='Factors of Happiness' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
          <calculation class='tableau' formula='&quot;Score&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
            <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
            <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
            <alias key='&quot;GDP&quot;' value='GDP/Capita' />
            <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
            <alias key='&quot;Score&quot;' value='Happiness Score' />
            <alias key='&quot;Social&quot;' value='Social Support' />
          </aliases>
        </column>
        <column alias='Pure Alc. Liter' caption='Alcohol Consumption/Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
          <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. Liter' />
            <alias key='&quot;Beer Servings&quot;' value='Beer' />
            <alias key='&quot;Spirit Servings&quot;' value='Spirit' />
            <alias key='&quot;Wine Servings&quot;' value='Wine' />
          </aliases>
        </column>
        <column alias='Pure Alc./Liter' caption='Score/Alcohol' datatype='string' name='[Variables (copy)_902408822342832130]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
          <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
            <alias key='&quot;Score&quot;' value='Happiness Score' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='df.csv' id='df.csv_18A2BC7DC8424E9682B68944B591D4ED'>
            <properties context=''>
              <relation connection='textscan.0o76jqw11qjz9k11ff3yh1bjucmm' name='df.csv' table='[df#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='Country' ordinal='0' />
                  <column datatype='string' name='con_code' ordinal='1' />
                  <column datatype='real' name='Score' ordinal='2' />
                  <column datatype='real' name='GDP' ordinal='3' />
                  <column datatype='real' name='social' ordinal='4' />
                  <column datatype='real' name='life_expectancy' ordinal='5' />
                  <column datatype='real' name='freedom' ordinal='6' />
                  <column datatype='real' name='Generosity' ordinal='7' />
                  <column datatype='real' name='corruption' ordinal='8' />
                  <column datatype='real' name='alcohol_consumption' ordinal='9' />
                  <column datatype='integer' name='beer_servings' ordinal='10' />
                  <column datatype='integer' name='spirit_servings' ordinal='11' />
                  <column datatype='integer' name='wine_servings' ordinal='12' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='happy'>
      <layout-options>
        <title>
          <formatted-text>
            <run>happiness score above 7</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' />
          </datasources>
          <datasource-dependencies datasource='federated.1l4ebne1a5c54612l4jyt1kq51vc'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' included-values='in-range'>
            <min>7.0</min>
            <max>7.6319999999999997</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]</column>
            <column>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk] / [federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names])</rows>
        <cols>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{76E1DF1E-B861-44CD-9211-899FECAC9CD3}' />
    </worksheet>
    <worksheet name='multi-bar'>
      <layout-options>
        <title>
          <formatted-text>
            <run>world rankings</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' />
          </datasources>
          <datasource-dependencies datasource='federated.1l4ebne1a5c54612l4jyt1kq51vc'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]&quot;</bucket>
              <bucket>&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' direction='DESC' using='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' />
          <slices>
            <column>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk] / [federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names])</rows>
        <cols>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{38192BB1-C3C3-4DE2-910B-EF3B4DAF9188}' />
    </worksheet>
    <worksheet name='sad'>
      <layout-options>
        <title>
          <formatted-text>
            <run>happiness score below 4</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' />
          </datasources>
          <datasource-dependencies datasource='federated.1l4ebne1a5c54612l4jyt1kq51vc'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' included-values='in-range'>
            <min>0.0</min>
            <max>4.0</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names]</column>
            <column>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk] / [federated.1l4ebne1a5c54612l4jyt1kq51vc].[:Measure Names])</rows>
        <cols>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{87785264-F2B4-405B-A7E7-9302E20A9DCD}' />
    </worksheet>
    <worksheet name='scatterplot'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='Happiness Score' caption='Factors of Happiness' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
              <calculation class='tableau' formula='&quot;Score&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
                <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
                <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
                <alias key='&quot;GDP&quot;' value='GDP/Capita' />
                <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
                <alias key='&quot;Score&quot;' value='Happiness Score' />
                <alias key='&quot;Social&quot;' value='Social Support' />
              </aliases>
            </column>
            <column alias='Pure Alc. Liter' caption='Alcohol Consumption/Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
              <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. Liter' />
                <alias key='&quot;Beer Servings&quot;' value='Beer' />
                <alias key='&quot;Spirit Servings&quot;' value='Spirit' />
                <alias key='&quot;Wine Servings&quot;' value='Wine' />
              </aliases>
            </column>
            <column alias='Pure Alc./Liter' caption='Score/Alcohol' datatype='string' name='[Variables (copy)_902408822342832130]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
              <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
                <alias key='&quot;Score&quot;' value='Happiness Score' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1l4ebne1a5c54612l4jyt1kq51vc'>
            <column caption='Factors' datatype='real' name='[Calculation_902408822341435392]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_902408822341632001]&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Life_Expectancy_Years' datatype='real' name='[Calculation_902408822341632001]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[life_expectancy]*100' />
            </column>
            <column caption='Score/Consumption' datatype='real' name='[Calculation_902408822343163907]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Variables (copy)_902408822342832130]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='consumption detail' datatype='real' name='[Calculation_902408822343553028]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;Beer Servings&quot; THEN [beer_servings]&#13;&#10;WHEN &quot;Wine Servings&quot; THEN [wine_servings]&#13;&#10;WHEN &quot;Spirit Servings&quot; THEN [spirit_servings]&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[Generosity]' role='measure' type='quantitative' />
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
            <column caption='Beer Servings' datatype='integer' name='[beer_servings]' role='measure' type='quantitative' />
            <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative' />
            <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative' />
            <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative' />
            <column caption='Spirit Servings' datatype='integer' name='[spirit_servings]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_902408822341435392]' derivation='Sum' name='[sum:Calculation_902408822341435392:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_902408822341632001]' derivation='Sum' name='[sum:Calculation_902408822341632001:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_902408822343163907]' derivation='Sum' name='[sum:Calculation_902408822343163907:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_902408822343553028]' derivation='Sum' name='[sum:Calculation_902408822343553028:qk]' pivot='key' type='quantitative' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Generosity]' derivation='Sum' name='[sum:Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[beer_servings]' derivation='Sum' name='[sum:beer_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[corruption]' derivation='Sum' name='[sum:corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[freedom]' derivation='Sum' name='[sum:freedom:qk]' pivot='key' type='quantitative' />
            <column-instance column='[social]' derivation='Sum' name='[sum:social:qk]' pivot='key' type='quantitative' />
            <column-instance column='[spirit_servings]' derivation='Sum' name='[sum:spirit_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wine_servings]' derivation='Sum' name='[sum:wine_servings:qk]' pivot='key' type='quantitative' />
            <column caption='Wine Servings' datatype='integer' name='[wine_servings]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]' scope='cols' value='Factors of Happiness' />
            <format attr='auto-subtitle' class='0' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]' scope='cols' value='false' />
            <format attr='subtitle' class='0' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]' scope='cols' value='as selected by user' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' />
              <size column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822343553028:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:beer_servings:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:corruption:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:freedom:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:GDP:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Generosity:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341632001:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:social:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:spirit_servings:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:wine_servings:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Score or Alcohol Consumption:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822343163907:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Variable:&#9;</run>
                <run bold='true'>&lt;[Parameters].[Parameter 1]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Value:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.6574585437774658' />
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822343163907:qk]</rows>
        <cols>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Calculation_902408822341435392:qk]</cols>
      </table>
      <simple-id uuid='{0CF25B42-93E8-4524-B9BB-4C8E35C1EFFA}' />
    </worksheet>
    <worksheet name='world map'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.1l4ebne1a5c54612l4jyt1kq51vc' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1l4ebne1a5c54612l4jyt1kq51vc'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[Score]' role='measure' type='quantitative' />
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative' />
            <column caption='Beer Servings' datatype='integer' name='[beer_servings]' role='measure' type='quantitative' />
            <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative' />
            <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative' />
            <column caption='Spirit Servings' datatype='integer' name='[spirit_servings]' role='measure' type='quantitative' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[beer_servings]' derivation='Sum' name='[sum:beer_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[corruption]' derivation='Sum' name='[sum:corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[freedom]' derivation='Sum' name='[sum:freedom:qk]' pivot='key' type='quantitative' />
            <column-instance column='[social]' derivation='Sum' name='[sum:social:qk]' pivot='key' type='quantitative' />
            <column-instance column='[spirit_servings]' derivation='Sum' name='[sum:spirit_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wine_servings]' derivation='Sum' name='[sum:wine_servings:qk]' pivot='key' type='quantitative' />
            <column caption='Wine Servings' datatype='integer' name='[wine_servings]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Longitude (generated)]' field-type='quantitative' max='59421032.976613112' min='20837053.635787621' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Latitude (generated)]' field-type='quantitative' max='20883857.311802745' min='-17268112.132314317' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#d3dbe2</color>
                <color>#b7c6d4</color>
                <color>#9eb2c5</color>
                <color>#869fb7</color>
                <color>#708da9</color>
                <color>#5c7b9a</color>
                <color>#4a6b8c</color>
                <color>#3a5c7d</color>
                <color>#2c4e6f</color>
                <color>#204161</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' value='Happiness Score Scale:'>
              <formatted-text>
                <run>Happiness Score Scale:</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' />
              <lod column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:GDP:qk]' />
              <lod column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:social:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:spirit_servings:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:wine_servings:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:corruption:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:freedom:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:beer_servings:qk]' />
              <tooltip column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:GDP:qk]' />
              <geometry column='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Happiness Score:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Pure Alcohol/Liter:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:alcohol_consumption:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>* Beer Servings:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:beer_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>* Spirit Servings:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:spirit_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>* Wine Servings:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:wine_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Corruption:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:corruption:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Freedom:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:freedom:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>GDP:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:GDP:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Social:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:social:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Latitude (generated)]</rows>
        <cols>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{19C40268-23F4-40D8-B61E-5104D00C9FAE}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='4' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='7' param='horz' w='98400' x='800' y='1000'>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='98000' id='5' w='98400' x='800' y='1000'>
              <zone h='98000' id='3' name='multi-bar' w='49200' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='happy' w='49200' x='50000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='10' name='sad' w='49200' x='50000' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='900' minheight='900' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='26' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='25' param='vert' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='multi-bar' w='49200' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='happy' w='49200' x='50000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='10' is-fixed='true' name='sad' w='49200' x='50000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8DF616D9-3E1A-47F7-952A-CD3D310AB6B8}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='world map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]</field>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{CB43312E-C3A9-481C-B6D3-4B75B2EF4D11}' />
    </window>
    <window class='worksheet' maximized='true' name='scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Variables (copy)_902408822342832130]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='2' param='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Parameters].[Variables (copy)_902408822342832130]</field>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E79FE44C-07A8-4FF5-A65D-2D3F2C7DD22D}' />
    </window>
    <window class='worksheet' name='multi-bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FF492298-A206-40E9-B96D-924F334B9AAE}' />
    </window>
    <window class='worksheet' name='happy'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{15E05E5F-1616-42ED-A8DA-5D34CC8BA296}' />
    </window>
    <window class='worksheet' name='sad'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1l4ebne1a5c54612l4jyt1kq51vc].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8FC5AD17-39F7-4678-A895-93C5C4E1E30F}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='happy' />
        <viewpoint name='multi-bar' />
        <viewpoint name='sad' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{5C573006-DD24-44FF-921A-AA1D2B6865E2}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      eFbcNKgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='happy' width='192'>
      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
      1/z/XxuKzE+C3fQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='multi-bar' width='192'>
      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
      +P8H6yBM+JHVkDYAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='sad' width='192'>
      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
      /n/2SiLlwdlnaAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='scatterplot' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAARPElEQVR4nO3d+3Nc5X3H8fc5e5NWd0uWdbMuvsgYOxAKxhiahBJKYFJC0wbSKUPTdjr8
      Af2tf0J/6C/tL71MpjNtaVomnQQaDKThkkAM2MQ4FpZs62rdb6vbam86e87TH2QZGWu1u9qz
      6yM939cMw9h79nuelfbjPefseZ6voZRSCKEps1iF3c6VUqooNXWrtxvGWMp6RQuA4ziergdg
      27ZW9cD9n6PXX3O2ekULgBC7gQRAaE0CILRWUAAc26Lv8kVmFuMkogt8fqWX2ciyW2MTouj8
      hTzZ9AXoaG8hkrIZGBkiEK7CSls4joPjOK6e0btdb6NmOp3Wpt5GTbd/L15+zdnqFRSAzYKh
      EJ1Hurnee4XWAw0opfD5fG6Vx7ZtTNPEMAzXaqbTafx+134Enq+nlMIwDFd/L15/zdnqFbQn
      20oyOjlPmmWOHDrC8PWrHGhpK6SkECVlFOubYNu25RPAY/WUUjiOI58Am8hVIKE1CYDQmgRA
      aE0CILQmARBac+90WwivUwrSCVgYgOQyoCQAQgNKQSICw+/B3BVQX9wSLgEQe9/kpzDwFjjW
      HQ9JAMTepRS+qQsw8GbGTeQkWOxd0QmMwZ9vu4kEQOxNSsHA26BkSqTQUWwGlm9k3UwCIPam
      yPWcNpMAiL0pNpfTZgUFQClFLLpEPJUmnYxx9do1ZiNLhZQUwh32Wk6bFXQZVDlppsdvENx3
      CH9sgvqWLhoqg4WUFMId/lBumxWyD9MXoLn5AJEU1DQ2Mz07zvS4zYljR2ROsAfrbdTUYU6w
      GW7M6fCm4CmRQ8M3WEmHCR5sYG3Nwu8LYpqmzAn2YD2t5gTvvweGtv8OAGRKpDd/eUWqp9WU
      SKWg55WsV4PkKpDYmwwDDj8FZmDbzSQAYu+qaMS55w/ByPyJJwEQe5pTfxxOvACB8JaPy92g
      Yu/bfxyq22Ds1zB9Caz4rYfkJNiLJ3BFqqfVSXCmerYF0QmZESY05QtAbeetP8o5gNCaBEBo
      TQIgtCYBEFqTAAitSQCE1iQAQmsSAKE1CYDQWuFtUn/7KVORGKAY7PuMofHcJiML4QWFt0nt
      aCOSckisLGAZQXyWtEn1ar2NmjpMicy1nmv3Ao2NT2BZKeaWbY52tciUSA/W02pKZI71Cp4T
      PDYVIc0K3cfuw3QSRONO9icK4REFBcAXKOPY8ROb/qKc2ppChyRE6chVIKE1CYDQmgRAaE0C
      ILQmARBakwAIrUkAhNYkAEJrEgChNQmA0JoEQGhNAiC0JgEQWpMACK0V3CZ1KTJHLGmRjEXp
      7+9neTXh1tiEKLrCAuDYLC/OsrCcxPAF6OxoY3hoyK2xCVF0Bc4J9rO/oZ5ICgIBH9f6egmF
      a2VOsEfrbdSUOcFfKHhK5PDwKFEnTMCpwwyUYdtpaZPq0XoyJ/hO0iFmF//y8iUdYu4kV4GE
      1iQAQmsSAKE1CYDQmgRAaE0CILQmARBakwAIrUkAhNYkAEJrEgChNQmA0JoEQGhNAiC0JgEQ
      Wivoxmvl2Az1X6W2+RBBJ8bE9DzlVbV0tDa5NT4hiqqwmQeGwf76WpYTaWob6ugKhrg2PIFq
      OXBr8oVbNuq5OSGmWGP0aj1AfoZfUlAADMPE7/eBDYnoAgNj85y491ghJYUoqYLnBN8Ynyal
      QljlPsqCJrNzEVqb9mMYBqbp3imGUsr1KZGO47g6Rq/X2/gZenmMpa5XcJvU4ye/WkgJIe4q
      uQoktCYBEFqTAAitubcAixBbUEqRTlisTi2RWIhhp9KYAR9ltWEqm2sIVpW5emEjXxIAUTS2
      ZRO5OsVC/wx26s7lCU2/SU1HA433teEvC9yFEUoARJHYqTTjHw2yOrWUcRsn7bA4OEs8skr7
      144SrCwr4QjXyTmAcJ1yFFMXR7Z982+WWoozfm4Q27KLPLI7SQCE61anlli+EcnrOYnIKosD
      M0UaUWYSAOEqpRQL/TOwgyWXFwfnULa79z5lIwEQrrLX0iQisR09d201SSqadHlE25MACFel
      ExZOeofH8gqs1ZS7A8pCAiDcpXZ09PPF04vTriIjCYBwla/Mj+nb+dsqEA66OJrsJADCVf5Q
      gFB1+c6eWxYguMPn7lTBAbDWUlhpB1AkEtIiVXeGaVB3aP+OnlvdXo8v4F77plwUFADHthi8
      2sNUJEY8usyFSz1ujUvsYjWd9YQbKvN6TqAiSMPx5iKNKLMC26QGaG9vI5KCcFUtBxrqAKRN
      qkfrbdQsRZvUA6c6mfhwgLUcLmv6Qn6aTnViBM3d1SbVsS3m5udZshLsqzRYXFggsrhMfV2N
      tEn1YL1Stkn11/rpePwepi+OEJ1cynhpqLy+kuaHOimrC2MYxu5qk6ocm5XoKmBQVhYkmUzh
      8weorAhLm1QP1rsbbVKV4xCbi7JyY4HkYgzbsjH9JqHqcqoP7qOyuQbT78u5ntvjK2xVCNNH
      TU3NrT+HQqW/m094m2GaVB6ooaKxev07AqUwDMAw7uo8gA1yO7QoCcMwwACDu/+m30y+BxBa
      kwAIrUkAhNYkAEJrEgChNQmA0JoEQGhNAiC0JgEQWpMACK1JAITWJABCaxIAobWCAqCcNP29
      l5lbShBbmqfn88+ZnF1wa2xCFF2BbVJNmpsaWEylmZuf5sSJE/T29tLUUItSCtt2b7HTjal8
      brf4dHOMXq8HuN521euvOVu9gtukbnTgMwxwbk4u23iTer1L5EZNneoVq3vnbq1XcJvU0fFZ
      UgQ53HGQa319HGhpx7g528fNN2sxam7U1a3ebhhjqeoVNCd4OzIn2Hv17sacYK/Xk6tAQmsS
      AKE1CYDQmgRAaE0CILQmARBakwAIrUkAhNYkAEJrEgChNVkcV5SeUhCbgcUhSC6B6YeKRth3
      FMxQSYciARCllVyC6z+DSD93dM3whTDbzkDnN8AsTa8wCYAondgs/PbfILWy9eN2CvPG+xCf
      hXufL0kI5BxAlEY6BVdezfzm32yuF0beXz9UKjLXAuDYaSYmJkg7pe30LXaJqYvrnwC5Gvt1
      bmEpkGsBGLh+lYpwOb19190qKfYKpWDmcn7PcdIw31ec8Wzi2jlAZUWY6dkIiURc2qR6tN5G
      zVK0Sb2NvYYvEcm7OZKzMolT4OsvapvUzWpq60iuzdOwvxHTNKVNqgfrlbJN6u07XgOV/2R8
      07EwC3z9Re0SuVm4soa2sgoCgYBbJcVe4QuBLwj2Wn7PC1UXZzybZDwHcBwby7JyXqLCME2C
      waAnWl8KjzF9UNOR//Pqutwfy5dsHQBl8/d/97e8/vrrfPxZb9EHITTQ+jDkcxYQboB9R4o2
      nA0ZPgEM/C4eJwpBbSe0nc5tW9MPx76z/v8iyxiARx5+kHg8RlV1bdEHITRgGHD4KWg5te1m
      yhda/xZ4J4dMWdiOzUI8QjS5cutKWIaIOZzvGeTlv3yRf/n3/+G+7h+4PhihIdMP3X8A9Udh
      7Bwsj4G6eY7pL4f9x7HbHsNf0bAeGJdMrUzyWs+PuTh+gcRaHAyDxspGHj/yZIaFsZSi77OP
      +LR3mDOPP8WRtv1571QWxvJePU8tjKXU+lWhtSgYPghVgeEjbduuvWalFB8Ovs8PP/lH1uzU
      ltvceQikHD67fJnJmVmCAT+Tk5OuDEaI2xgG+EPrJ7vldeufDi5fQbw08Rv+6aN/yPjmhy3P
      AQzu/8pJaps6eeH571EVksuaYvdJpVP86yf/jJPlC7g7P2sMg0vn3ueH//VTeh74KrWtR3ng
      /iKNUogiuTh2nvkcbr7b8mDrdx59gm9NTLKcdOjq6nR3ZEKUwNXZ7N9fhQwz02VQxUJc8f3n
      /5iPP3iXtMtNGoQotmgqmnWb7mA4860QHU21/Ozs2+yrruCTS/JtsNhdKoOVWbdpDoQyB2B0
      dAzHcWjqPMZjD37F1cEJUWzdjfdk3cZgm5vhEvHYzW/LZIaX2H0eOniauvC+bbeZSqcyB6Cs
      ppFnn32W0/ff6/rghCi2UKCMH5z6K4xtbsC7nopvcw7QUs/Zs2e5cPlqTjtcmJ2kr6+PkfGp
      /EcrhMsMDE61n+HPH34ZX4ab6pLKyTwhxrFtrFSc0fFpHnso+zlAPL5+j0UikSjKlEillEyJ
      dKlmyadE3sV63zj0TQ7XH+Unl1+lZ/oSazcn5dSW1fG1Q7+XKQAGrQc7qK5PcL5nIKcdrcYS
      tB86wkD/4K1WnG62u3QcpygdDt28L2Y31CtGTa/X62o4zF8/8TdYjsViPELAF6S2rBbDMDN/
      AqSsNFYywTNPP5PTTlpbmhkdGaGxqeXWm1RafHqr3sacYC+PsZj1gr4gB6qab3ts6wAoh08+
      vYRKp7gyNMnhv3gp606q6ho4XtdQ+GiFKKGtA2CY3HeklWBDB7Yl3wKLvSvDQbrDRxcucmPg
      GpaSu0HF3pVxSmRrS/PNVSHyX89FiN1i6wAYBoe7OrFti9q67b9NE2I3y7AsisP5ngG+/73v
      cu5X75R4SEKUToZDIJMnH3uAH736Gt/69ndKOyIhSmjLAPz4v3/EwROn+NM/+SPO/eq9Uo9J
      eEzaUQxGEnw0ssIvB5c4P7rC+FIKpwTr9xfblpdBm2qCvPHWO9SZUfzhulKPSXjI5EqKcyMr
      xNZuvxjSN5ugPuzn0Y4q9u3iPkN3DN1JrrBqVFIXDtB1+GGeONhyN8YlPGBiOcW7A0tk6nkS
      iaf5v/4lnrlnH9VluzMFW64LpJRiYqSfvv5hFD66T95PZ0t+awPJukDeq5fPukBrtsNrn0eI
      W9kvgzdVBXiqu86V302pf4ZbngMYwNUrPaxYCscwqS7fnekWOzccSeb05geYjlrMxawij+jL
      1PriWhv/7XDiVsalEa8OjdFysJUbc2me/n05D9DNdDS/tfxnohaNlcEijWYTpcCKw/Rn632G
      12IQrIC6Q9D0AATCeS2wlfF26K9//XdZs308fVLmA+somc7vX9RUugR3DCgFketw7fX1JRU3
      WxhYX2/02HNQ351zCDLesP/x++8wv7zCjbGJgsYsdqcyf37H8yF/CTruLo2st1r98pt/w9rq
      +uNLwzmXzHgv0OkzjzB4tTfnNdoX5qa5du0a1wZy37nwrqaq/A5nmqqK3BrLtqD/LDhZzjUc
      C/rfXN8+BxnPAT640MOfvfgCr/zkbY4fyj4fYN/+JsqDPsaX0rem3Lk9hbEYNXWsl0vNrvoy
      Lk/Fcr4KVF8RcG2sW9ZZvoERm8mtQGwGtTRyq8PMduPKEACTE4db+en/nuX+Bx7JbadKMTQ6
      xbGT96HU7pkTrFO9fGqawJmOKt4bXM74PQBAmd/k9MFKHJdWD8w0PnN5PK82q2p5HKemK+vr
      zRAARUyV8dKL3+bNX/wSyL7IkJNOUlHTgN8ADGmT6sV6+bZJbav18+RRk3Mjy6yu3flGaqjw
      82h7FbVh967+bLzmL/9jZ6j8Jsqb2Jh+/87bpC5PDfMfr/wn4f25deozA+V0tpfnNUjhfc3V
      QZ472cDoYpLZVYs126E84KO5OkhrdTDnLqL5iE4ssjQ0R2IxDkBZbTl1FQaV5NFmryy31l5b
      BmBuapzvvvQyv/nwF3TcK5dBdec3DQ7Vl3Oovrj/wNmWzeTHQ0THF2/7eyuWImmaHG7w4TNz
      CJwvAHWHc9rnlleBfvbGzxn7/ANm1ip56+wbORUSohBKKSbP3/nm32A55Swm2snpNLDlVM6f
      AFsG4MyD9/LuxVGeeuwEbW3tORUSohCxmRVWRhe22cJgNtpNNNW4fQjqu6HriZy/CNu6SZ4L
      5GY479XzVJO8L5n4ZIilobms2xnYNO4bp75qFCO18sUDoWpoewRaT68fAuU4PrnLTXhCcjGW
      03YKHwupbuq/+RzE59fvCwqE15vt+UN571cCILwh3092XxCqWwve7f8DZ3li34RsWm0AAAAA
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='world map' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
