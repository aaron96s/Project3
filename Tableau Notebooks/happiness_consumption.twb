<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.0420.1112                               -->
<workbook original-version='18.1' source-build='2021.1.1 (20211.21.0420.1112)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='project_3_map' path='/workbooks' revision='2.0' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='Life Expectancy' caption='Factors of Happiness' datatype='string' name='[Factors of Happiness (copy)_1036390909735903238]' param-domain-type='list' role='measure' type='nominal' value='&quot;Life_Expectancy_Years&quot;'>
        <calculation class='tableau' formula='&quot;Life_Expectancy_Years&quot;' />
        <aliases>
          <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
          <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
          <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
          <alias key='&quot;Social&quot;' value='Social Security' />
        </aliases>
        <members>
          <member alias='Perception of Corruption' value='&quot;Corruption&quot;' />
          <member alias='Social Security' value='&quot;Social&quot;' />
          <member alias='Perception of Freedom' value='&quot;Freedom&quot;' />
          <member value='&quot;GDP&quot;' />
          <member value='&quot;Generosity&quot;' />
          <member alias='Life Expectancy' value='&quot;Life_Expectancy_Years&quot;' />
        </members>
      </column>
      <column alias='Pure Alc. by Liter/Capita' caption='Variables' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
        <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. by Liter/Capita' />
          <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
          <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
          <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
          <alias key='&quot;Score&quot;' value='Happiness Score' />
          <alias key='&quot;Social&quot;' value='Social Security' />
        </aliases>
        <members>
          <member alias='Pure Alc. by Liter/Capita' value='&quot;Alcohol Consumption&quot;' />
          <member alias='Happiness Score' value='&quot;Score&quot;' />
          <member alias='Perception of Corruption' value='&quot;Corruption&quot;' />
          <member alias='Social Security' value='&quot;Social&quot;' />
          <member alias='Perception of Freedom' value='&quot;Freedom&quot;' />
          <member value='&quot;GDP&quot;' />
          <member value='&quot;Generosity&quot;' />
          <member alias='Life Expectancy' value='&quot;Life_Expectancy_Years&quot;' />
        </members>
      </column>
      <column caption='Alcohol Consumption per Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Beer Servings&quot;'>
        <calculation class='tableau' formula='&quot;Beer Servings&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
        </aliases>
        <members>
          <member alias='Pure Alc./Liter' value='&quot;Alcohol Consumption&quot;' />
          <member value='&quot;Beer Servings&quot;' />
          <member value='&quot;Wine Servings&quot;' />
          <member value='&quot;Spirit Servings&quot;' />
        </members>
      </column>
      <column alias='Happiness Score' caption='Score/Consumption' datatype='string' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
        <calculation class='tableau' formula='&quot;Score&quot;' />
        <aliases>
          <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
          <alias key='&quot;Score&quot;' value='Happiness Score' />
        </aliases>
        <members>
          <member alias='Pure Alc./Liter' value='&quot;Alcohol Consumption&quot;' />
          <member alias='Happiness Score' value='&quot;Score&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='df' inline='true' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df' name='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/joanc/DataClass/Project 3/Project3/Data' filename='df.json' password='' server='' workgroup-auth-mode='as-is'>
              <semistruct-schemas>
                <semistruct-schema table='[df.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>GDP</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Generosity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Generosity]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Generosity</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Score</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alcohol_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[alcohol_consumption]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>alcohol_consumption</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>beer_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[beer_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>beer_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>con_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[con_code]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>con_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[corruption]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>corruption</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freedom</remote-name>
            <remote-type>5</remote-type>
            <local-name>[freedom]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>freedom</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expectancy]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>life_expectancy</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>social</remote-name>
            <remote-type>5</remote-type>
            <local-name>[social]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>social</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>spirit_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[spirit_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>spirit_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wine_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wine_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>wine_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Factors' datatype='real' name='[Calculation_1036390909715333120]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_1036390909728247810]&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Life_Expectancy_Years' datatype='real' name='[Calculation_1036390909728247810]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[life_expectancy]*100' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>Country</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Score/Happiness' datatype='real' name='[Factors (copy)_1036390909734445060]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;&#13;&#10;END' />
      </column>
      <column caption='Factors (scatter)' datatype='real' name='[Factors (copy)_1036390909735747589]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_1036390909728247810]&#13;&#10;&#13;&#10;END' />
      </column>
      <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>GDP</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[Generosity]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Generosity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='consumption detail' datatype='real' name='[Placeholder 1 (copy)_1036390909715836929]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;Beer Servings&quot; THEN [beer_servings]&#13;&#10;WHEN &quot;Wine Servings&quot; THEN [wine_servings]&#13;&#10;WHEN &quot;Spirit Servings&quot; THEN [spirit_servings]&#13;&#10;END' />
      </column>
      <column datatype='real' name='[Score]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Score</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='df.json' datatype='table' name='[__tableau_internal_object_id__].[df.json_4BDF5B4E64834290891BEF5A7F3D1662]' role='measure' type='quantitative' />
      <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>alcohol_consumption</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Beer Servings' datatype='real' name='[beer_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>beer_servings</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Con Code' datatype='string' name='[con_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>con_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>corruption</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>freedom</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>life_expectancy</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>social</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Spirit Servings' datatype='real' name='[spirit_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>spirit_servings</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Wine Servings' datatype='real' name='[wine_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>wine_servings</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[con_code]' derivation='None' name='[none:con_code:nk]' pivot='key' type='nominal' />
      <_.fcp.SchemaViewerObjectModel.false...folder name='Df' role='dimensions'>
        <folder-item name='[Country]' type='field' />
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[con_code]' type='field' />
      </_.fcp.SchemaViewerObjectModel.false...folder>
      <_.fcp.SchemaViewerObjectModel.true...folders-common>
        <folder name='Df'>
          <folder-item name='[Country]' type='field' />
          <folder-item name='[Document Index (generated)]' type='field' />
          <folder-item name='[con_code]' type='field' />
        </folder>
      </_.fcp.SchemaViewerObjectModel.true...folders-common>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='C:/Users/joanc/OneDrive/Documents/My Tableau Repository/Datasources/df.hyper' default-settings='yes' schema='Extract' sslmode='' tablename='Extract' update-time='05/19/2021 02:49:59 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='df' increment-value='%null%' refresh-type='create' rows-inserted='132' timestamp-start='2021-05-19 02:49:59.212' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Document Index (generated)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Document Index (generated)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Document Index (generated)</remote-alias>
              <ordinal>0</ordinal>
              <family>df.json</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>132</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>1</ordinal>
              <family>df.json</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>132</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GDP</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GDP]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GDP</remote-alias>
              <ordinal>2</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>126</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Generosity</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Generosity]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Generosity</remote-alias>
              <ordinal>3</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>107</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Score</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Score</remote-alias>
              <ordinal>4</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>130</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>alcohol_consumption</remote-name>
              <remote-type>5</remote-type>
              <local-name>[alcohol_consumption]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>alcohol_consumption</remote-alias>
              <ordinal>5</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>126</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>beer_servings</remote-name>
              <remote-type>5</remote-type>
              <local-name>[beer_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>beer_servings</remote-alias>
              <ordinal>6</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>99</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>con_code</remote-name>
              <remote-type>129</remote-type>
              <local-name>[con_code]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>con_code</remote-alias>
              <ordinal>7</ordinal>
              <family>df.json</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>132</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>corruption</remote-name>
              <remote-type>5</remote-type>
              <local-name>[corruption]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>corruption</remote-alias>
              <ordinal>8</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>102</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>freedom</remote-name>
              <remote-type>5</remote-type>
              <local-name>[freedom]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>freedom</remote-alias>
              <ordinal>9</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>118</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>life_expectancy</remote-name>
              <remote-type>5</remote-type>
              <local-name>[life_expectancy]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>life_expectancy</remote-alias>
              <ordinal>10</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>124</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>social</remote-name>
              <remote-type>5</remote-type>
              <local-name>[social]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>social</remote-alias>
              <ordinal>11</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>122</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>spirit_servings</remote-name>
              <remote-type>5</remote-type>
              <local-name>[spirit_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>spirit_servings</remote-alias>
              <ordinal>12</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>83</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>wine_servings</remote-name>
              <remote-type>5</remote-type>
              <local-name>[wine_servings]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>wine_servings</remote-alias>
              <ordinal>13</ordinal>
              <family>df.json</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>63</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='0.782118' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.217882' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:con_code:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;BDI&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;CRI&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;HND&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;LBY&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;NAM&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SEN&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;VNM&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AFG&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;BWA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;FRA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;JOR&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;MMR&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;POL&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;TKM&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ARM&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;CHL&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;GHA&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;KHM&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MRT&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ROU&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;UGA&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;BGD&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;DNK&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;IDN&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;LUX&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;NLD&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SOM&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;BEL&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;CYP&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;HRV&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;LKA&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;NER&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;SGP&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ZAF&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;AUS&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;CHN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;GIN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;KWT&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;MUS&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;RWA&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;UKR&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;BRA&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ETH&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ITA&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;MLI&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;PER&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;THA&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AGO&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;CAF&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;GAB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;JPN&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MNE&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;PRT&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;TUN&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;BLZ&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;ESP&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;ISL&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MDG&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;PAK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;TCD&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;AUT&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;CMR&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;GRC&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;LBN&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;MWI&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;SAU&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;URY&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;BGR&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;DOM&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;IND&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;LVA&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;NOR&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;SRB&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;BHR&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;DZA&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;IRL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;MAR&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;NPL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SVN&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;BOL&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;EST&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;ISR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;MEX&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;PAN&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;TGO&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;BTN&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;FIN&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;JAM&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;MLT&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;PHL&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;TJK&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;BEN&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;CZE&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;HTI&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LSO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;NGA&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;SLE&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ZMB&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;AZE&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;COL&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;GTM&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;LBR&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;MYS&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;SDN&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;UZB&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;ALB&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CAN&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;GBR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;KAZ&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;MNG&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;PRY&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;TUR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;BLR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;ECU&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;IRQ&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;MDA&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;NZL&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;SWE&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;BFA&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;DEU&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;HUN&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;LTU&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;NIC&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;SLV&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ZWE&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;ARG&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CHE&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;GEO&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;KEN&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;MOZ&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;QAT&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;TZA&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='Pure Alc. by Liter/Capita' caption='Variables' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
          <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. by Liter/Capita' />
            <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
            <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
            <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
            <alias key='&quot;Score&quot;' value='Happiness Score' />
            <alias key='&quot;Social&quot;' value='Social Security' />
          </aliases>
        </column>
        <column caption='Alcohol Consumption per Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Beer Servings&quot;'>
          <calculation class='tableau' formula='&quot;Beer Servings&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
          </aliases>
        </column>
        <column alias='Happiness Score' caption='Score/Consumption' datatype='string' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
          <calculation class='tableau' formula='&quot;Score&quot;' />
          <aliases>
            <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
            <alias key='&quot;Score&quot;' value='Happiness Score' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='df.json' id='df.json_4BDF5B4E64834290891BEF5A7F3D1662'>
            <properties context=''>
              <relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='bar'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='Pure Alc. by Liter/Capita' caption='Variables' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
              <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. by Liter/Capita' />
                <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
                <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
                <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
                <alias key='&quot;Score&quot;' value='Happiness Score' />
                <alias key='&quot;Social&quot;' value='Social Security' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.10t5ewy1hsau5v1cf7ro40bgzxlq'>
            <column caption='Factors' datatype='real' name='[Calculation_1036390909715333120]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_1036390909728247810]&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Life_Expectancy_Years' datatype='real' name='[Calculation_1036390909728247810]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[life_expectancy]*100' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Country</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>GDP</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Generosity]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Generosity</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Score]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Score</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>alcohol_consumption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>corruption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>freedom</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>life_expectancy</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>social</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1036390909715333120]' derivation='Sum' name='[sum:Calculation_1036390909715333120:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='Value' />
            <format attr='auto-subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='false' />
            <format attr='subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='as selected by dropdown menu' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' />
              <lod column='[Parameters].[Parameter 1]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Factors of Happiness:&#9;</run>
                <run bold='true'>&lt;[Parameters].[Parameter 1]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Value:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]</rows>
        <cols>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]</cols>
        <table-calculations>
          <partitionable-measures>
            <column>[Parameters].[Parameter 1]</column>
          </partitionable-measures>
        </table-calculations>
      </table>
      <simple-id uuid='{0157CAD7-9FE0-4446-8358-0A0D3840B6B7}' />
    </worksheet>
    <worksheet name='interactive scatterplot'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='Pure Alc. by Liter/Capita' caption='Variables' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Alcohol Consumption&quot;'>
              <calculation class='tableau' formula='&quot;Alcohol Consumption&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc. by Liter/Capita' />
                <alias key='&quot;Corruption&quot;' value='Perception of Corruption' />
                <alias key='&quot;Freedom&quot;' value='Perception of Freedom' />
                <alias key='&quot;Life_Expectancy_Years&quot;' value='Life Expectancy' />
                <alias key='&quot;Score&quot;' value='Happiness Score' />
                <alias key='&quot;Social&quot;' value='Social Security' />
              </aliases>
            </column>
            <column caption='Alcohol Consumption per Capita' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;Beer Servings&quot;'>
              <calculation class='tableau' formula='&quot;Beer Servings&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
              </aliases>
            </column>
            <column alias='Happiness Score' caption='Score/Consumption' datatype='string' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Score&quot;'>
              <calculation class='tableau' formula='&quot;Score&quot;' />
              <aliases>
                <alias key='&quot;Alcohol Consumption&quot;' value='Pure Alc./Liter' />
                <alias key='&quot;Score&quot;' value='Happiness Score' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.10t5ewy1hsau5v1cf7ro40bgzxlq'>
            <column caption='Factors' datatype='real' name='[Calculation_1036390909715333120]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;GDP&quot; THEN [GDP]&#13;&#10;WHEN &quot;Social&quot; THEN [social]&#13;&#10;WHEN &quot;Generosity&quot; THEN [Generosity]&#13;&#10;WHEN &quot;Freedom&quot; THEN [freedom]&#13;&#10;WHEN &quot;Corruption&quot; THEN [corruption]&#13;&#10;WHEN &quot;Life_Expectancy_Years&quot; THEN [Calculation_1036390909728247810]&#13;&#10;&#13;&#10;END' />
            </column>
            <column caption='Life_Expectancy_Years' datatype='real' name='[Calculation_1036390909728247810]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[life_expectancy]*100' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Country</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Score/Happiness' datatype='real' name='[Factors (copy)_1036390909734445060]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;&#13;&#10;END' />
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>GDP</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Generosity]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Generosity</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='consumption detail' datatype='real' name='[Placeholder 1 (copy)_1036390909715836929]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Parameter 2]&#13;&#10;WHEN &quot;Alcohol Consumption&quot; THEN [alcohol_consumption]&#13;&#10;WHEN &quot;Score&quot; THEN [Score]&#13;&#10;WHEN &quot;Beer Servings&quot; THEN [beer_servings]&#13;&#10;WHEN &quot;Wine Servings&quot; THEN [wine_servings]&#13;&#10;WHEN &quot;Spirit Servings&quot; THEN [spirit_servings]&#13;&#10;END' />
            </column>
            <column datatype='real' name='[Score]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Score</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>alcohol_consumption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Beer Servings' datatype='real' name='[beer_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>beer_servings</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>corruption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>freedom</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>life_expectancy</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>social</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Spirit Servings' datatype='real' name='[spirit_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>spirit_servings</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1036390909715333120]' derivation='Sum' name='[sum:Calculation_1036390909715333120:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Factors (copy)_1036390909734445060]' derivation='Sum' name='[sum:Factors (copy)_1036390909734445060:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Placeholder 1 (copy)_1036390909715836929]' derivation='Sum' name='[sum:Placeholder 1 (copy)_1036390909715836929:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Wine Servings' datatype='real' name='[wine_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>wine_servings</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:alcohol_consumption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Factors (copy)_1036390909734445060:qk]' scope='rows' value='Alcohol Consumption or Happiness' />
            <format attr='auto-subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Factors (copy)_1036390909734445060:qk]' scope='rows' value='false' />
            <format attr='subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Factors (copy)_1036390909734445060:qk]' scope='rows' value='as selected by user' />
            <format attr='title' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='Factor Value' />
            <format attr='auto-subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='false' />
            <format attr='subtitle' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]' scope='cols' value='as selected by user' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='cell-w' value='20' />
            <format attr='cell-h' value='20' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
          </style-rule>
        </style>
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' />
              <size column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Placeholder 1 (copy)_1036390909715836929:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Consumption/Capita:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Placeholder 1 (copy)_1036390909715836929:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Score:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.922652006149292' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Factors (copy)_1036390909734445060:qk]</rows>
        <cols>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]</cols>
      </table>
      <simple-id uuid='{5B8F4A39-92EB-44B6-B9CF-34280E41DA57}' />
    </worksheet>
    <worksheet name='world map'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10t5ewy1hsau5v1cf7ro40bgzxlq'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Country</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>GDP</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Generosity]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Generosity</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Score]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Score</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>alcohol_consumption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Beer Servings' datatype='real' name='[beer_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>beer_servings</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>corruption</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>life_expectancy</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>social</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Spirit Servings' datatype='real' name='[spirit_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>spirit_servings</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Generosity]' derivation='Sum' name='[sum:Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[beer_servings]' derivation='Sum' name='[sum:beer_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[corruption]' derivation='Sum' name='[sum:corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[life_expectancy]' derivation='Sum' name='[sum:life_expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[social]' derivation='Sum' name='[sum:social:qk]' pivot='key' type='quantitative' />
            <column-instance column='[spirit_servings]' derivation='Sum' name='[sum:spirit_servings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wine_servings]' derivation='Sum' name='[sum:wine_servings:qk]' pivot='key' type='quantitative' />
            <column caption='Wine Servings' datatype='real' name='[wine_servings]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>wine_servings</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Longitude (generated)]' field-type='quantitative' max='25045194.34795003' min='-20712352.417689089' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Latitude (generated)]' field-type='quantitative' max='23100921.430090744' min='-18715074.037934959' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' num-steps='8' palette='gold_purple_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' value='Happiness Score:'>
              <formatted-text>
                <run>Happiness Score:</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:alcohol_consumption:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:GDP:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:corruption:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:life_expectancy:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Generosity:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:social:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:spirit_servings:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:wine_servings:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:beer_servings:qk]' />
              <color column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' />
              <geometry column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Happiness Score:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Pure Alcohol Consumption (liter per capita):	</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:alcohol_consumption:qk]>]]></run>
                <run>Æ&#10;</run>
                <run bold='true' fontsize='8'>Drink Types (servings per capita):</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878' fontsize='7'>Beer:&#9;</run>
                <run bold='true' fontsize='7'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:beer_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878' fontsize='7'>Spirits:&#9;</run>
                <run bold='true' fontsize='7'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:spirit_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878' fontsize='7'>Wine:&#9;</run>
                <run bold='true' fontsize='7'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:wine_servings:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Perception of Corruption:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:corruption:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>GDP (per capita):&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:GDP:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Generosity:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Generosity:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Life Expectancy:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:life_expectancy:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Social Support:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:social:qk]>]]></run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Latitude (generated)]</rows>
        <cols>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{0DC71174-8E8D-42DF-838B-8CED62CA8177}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='world map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='36'>
            <card type='columns' />
          </strip>
          <strip size='36'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[avg:Score:qk]</field>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]</field>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{90AAD630-D438-4C05-B703-09B45143D073}' />
    </window>
    <window class='worksheet' maximized='true' name='interactive scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='7' param='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Calculation_1036390909715333120:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[Parameters].[Parameter 1]</field>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CB961AA9-141C-4BCC-B181-1111AD9569AC}' />
    </window>
    <window class='worksheet' name='bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C14C1BDE-7813-4167-92CE-D66A499A6B0B}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='bar' width='192'>
      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
      8P3yAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='interactive scatterplot' width='192'>
      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
      YiXlCWCybwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='world map' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
