<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.0420.1112                               -->
<workbook original-version='18.1' source-build='2021.1.1 (20211.21.0420.1112)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='df' inline='true' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df' name='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/joanc/DataClass/Project 3/Project3/Data' filename='df.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[df.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>GDP</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Generosity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Generosity]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Generosity</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Score]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>Score</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>alcohol_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[alcohol_consumption]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>alcohol_consumption</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>beer_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[beer_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>beer_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>con_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[con_code]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>con_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[corruption]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>corruption</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>freedom</remote-name>
            <remote-type>5</remote-type>
            <local-name>[freedom]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>freedom</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expectancy]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>life_expectancy</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>social</remote-name>
            <remote-type>5</remote-type>
            <local-name>[social]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>social</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>spirit_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[spirit_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>spirit_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wine_servings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wine_servings]</local-name>
            <parent-name>[df.json]</parent-name>
            <remote-alias>wine_servings</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[df.json_4BDF5B4E64834290891BEF5A7F3D1662]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>Country</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>GDP</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[Generosity]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Generosity</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[Score]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Score</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='df.json' datatype='table' name='[__tableau_internal_object_id__].[df.json_4BDF5B4E64834290891BEF5A7F3D1662]' role='measure' type='quantitative' />
      <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>alcohol_consumption</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Beer Servings' datatype='real' name='[beer_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>beer_servings</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Con Code' datatype='string' name='[con_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>con_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Corruption' datatype='real' name='[corruption]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>corruption</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Freedom' datatype='real' name='[freedom]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>freedom</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>life_expectancy</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Social' datatype='real' name='[social]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>social</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Spirit Servings' datatype='real' name='[spirit_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>spirit_servings</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Wine Servings' datatype='real' name='[wine_servings]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>wine_servings</run>
          </formatted-text>
        </desc>
      </column>
      <_.fcp.SchemaViewerObjectModel.false...folder name='Df' role='dimensions'>
        <folder-item name='[Country]' type='field' />
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[con_code]' type='field' />
      </_.fcp.SchemaViewerObjectModel.false...folder>
      <_.fcp.SchemaViewerObjectModel.true...folders-common>
        <folder name='Df'>
          <folder-item name='[Country]' type='field' />
          <folder-item name='[Document Index (generated)]' type='field' />
          <folder-item name='[con_code]' type='field' />
        </folder>
      </_.fcp.SchemaViewerObjectModel.true...folders-common>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='df.json' id='df.json_4BDF5B4E64834290891BEF5A7F3D1662'>
            <properties context=''>
              <relation connection='semistructpassivestore-direct.0y32te00ulrwlq14p3dks1ejk08x' name='df.json' table='[df.json]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='df' name='federated.10t5ewy1hsau5v1cf7ro40bgzxlq' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10t5ewy1hsau5v1cf7ro40bgzxlq'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>Country</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>GDP</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[Score]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Score</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alcohol Consumption' datatype='real' name='[alcohol_consumption]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>alcohol_consumption</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Score]' derivation='Sum' name='[sum:Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alcohol_consumption]' derivation='Sum' name='[sum:alcohol_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Longitude (generated)]' field-type='quantitative' max='33248359.579600904' min='-17084940.362552896' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Latitude (generated)]' field-type='quantitative' max='22840127.028996617' min='-23157466.614996538' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' num-steps='8' palette='gold_purple_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:alcohol_consumption:qk]' />
              <lod column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:GDP:qk]' />
              <color column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' />
              <geometry column='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Score:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Alcohol Consumption:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:alcohol_consumption:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>GDP:&#9;</run>
                <run bold='true'><![CDATA[<[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:GDP:qk]>]]></run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Latitude (generated)]</rows>
        <cols>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{0DC71174-8E8D-42DF-838B-8CED62CA8177}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' maximized='true' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[avg:Score:qk]</field>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[none:Country:nk]</field>
            <field>[federated.10t5ewy1hsau5v1cf7ro40bgzxlq].[sum:Score:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{90AAD630-D438-4C05-B703-09B45143D073}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9V3AcZ5bv+Uuf5QtV8I4ASdCTkijvbUvdaque6e4bM3N3ZnZ2bsTO0z7t
      0zzswz7cp43Y2I2JubMxO3fv3Nvdt3ukNmqnlpcoytN7AiQAknCF8jYr3T4UM1lwJEFBZFHE
      PwIBoCor68vMc77vfOf8zzlCqVRyZVlmHeu4EyHLsoymabd6HOtYxy2BeKsHsI513EqsK8A6
      7misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A6
      7misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A6
      7misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A67misK8A6
      7misK8A67misK8A67misd8ZoIbiu6/+2bRtJknBdF1EUEQThFo/uq4l1BWgB2LYNQLlcBkAQ
      BEzT9N8PBAKIoojrumiatq4Ma4h1BbjFcF2XQqGALMv+zL8Y1WrV/9u2bUKh0M0c4lca6wpw
      C+C6LoIg+MIuy/KCGb8ZsiwjCIJvHqmqiuM4iOL69m0tcMcrQK1a49KFi8Ta4oyNjrFx4zCz
      UzM4pk2is52+Df1rZnK4rovrulSrVVRV9QU7GAxSq9UwDMM/VpZlFEXxFUUURURRpF6vY1kW
      0Wh03RRaAwi1Ws2905rkua7L7PQMmXSGUrHE9HtnMQUbsUOHkkWtUkVHoYxBclM3G0Y2snHr
      Jl8obwT1et0Xfk8RQqEQkiRhGAaWZfmCrigKkiThOA61Wm3JuWRZJhwOr68Ca4A7UgFOHj3O
      0Q8PYs1VMSUHOaSSrAWpunVKdoUOOU7dsdCkhrAbqk10aydTF6bYffdudt9/96q+z3EcLMvC
      cRxc1/X/tm0bWZZ9JYDGhrdery+7F/Cg6zqGYaDrOoqisN7m9sZxx00hM1PTXDgzQXEujyxK
      dMttOLaDIVgERQ0dFcAX/lkri5jQKB+ZI5aVuXhqwrfHVwNVVRFF0bffw+EwwWAQ27ap1+v+
      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
    </thumbnail>
  </thumbnails>
</workbook>
